//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* eslint-disable */
// ReSharper disable InconsistentNaming

export class Client {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param body (optional) 
     * @return Created
     */
    register(body: RegisterDto | undefined): Promise<RegisterDto> {
        let url_ = this.baseUrl + "/api/Auth/register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRegister(_response);
        });
    }

    protected processRegister(response: Response): Promise<RegisterDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 201) {
            return response.text().then((_responseText) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = RegisterDto.fromJS(resultData201);
            return result201;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<RegisterDto>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    login(body: LoginDto | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Auth/login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLogin(_response);
        });
    }

    protected processLogin(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Created
     */
    completionsPOST(habitId: number): Promise<Completion> {
        let url_ = this.baseUrl + "/api/habits/{habitId}/Completions";
        if (habitId === undefined || habitId === null)
            throw new globalThis.Error("The parameter 'habitId' must be defined.");
        url_ = url_.replace("{habitId}", encodeURIComponent("" + habitId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCompletionsPOST(_response);
        });
    }

    protected processCompletionsPOST(response: Response): Promise<Completion> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 201) {
            return response.text().then((_responseText) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = Completion.fromJS(resultData201);
            return result201;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Completion>(null as any);
    }

    /**
     * @return OK
     */
    completionsGET(habitId: number): Promise<HabitProgressDto> {
        let url_ = this.baseUrl + "/api/habits/{habitId}/Completions";
        if (habitId === undefined || habitId === null)
            throw new globalThis.Error("The parameter 'habitId' must be defined.");
        url_ = url_.replace("{habitId}", encodeURIComponent("" + habitId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCompletionsGET(_response);
        });
    }

    protected processCompletionsGET(response: Response): Promise<HabitProgressDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = HabitProgressDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<HabitProgressDto>(null as any);
    }

    /**
     * @return OK
     */
    habitsAll(): Promise<Habit[]> {
        let url_ = this.baseUrl + "/api/Habits";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processHabitsAll(_response);
        });
    }

    protected processHabitsAll(response: Response): Promise<Habit[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Habit.fromJS(item));
            }
            else {
                result200 = null as any;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Habit[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Created
     */
    habitsPOST(body: HabitDto | undefined): Promise<Habit> {
        let url_ = this.baseUrl + "/api/Habits";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processHabitsPOST(_response);
        });
    }

    protected processHabitsPOST(response: Response): Promise<Habit> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 201) {
            return response.text().then((_responseText) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = Habit.fromJS(resultData201);
            return result201;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Habit>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    habitsPUT(id: number, body: HabitDto | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Habits/{id}";
        if (id === undefined || id === null)
            throw new globalThis.Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processHabitsPUT(_response);
        });
    }

    protected processHabitsPUT(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    habitsDELETE(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/Habits/{id}";
        if (id === undefined || id === null)
            throw new globalThis.Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processHabitsDELETE(_response);
        });
    }

    protected processHabitsDELETE(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export class Completion implements ICompletion {
    id?: number;
    habitId?: number;
    habit?: Habit;
    completedAt?: Date;

    constructor(data?: ICompletion) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.habitId = _data["habitId"];
            this.habit = _data["habit"] ? Habit.fromJS(_data["habit"]) : undefined as any;
            this.completedAt = _data["completedAt"] ? new Date(_data["completedAt"].toString()) : undefined as any;
        }
    }

    static fromJS(data: any): Completion {
        data = typeof data === 'object' ? data : {};
        let result = new Completion();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["habitId"] = this.habitId;
        data["habit"] = this.habit ? this.habit.toJSON() : undefined as any;
        data["completedAt"] = this.completedAt ? this.completedAt.toISOString() : undefined as any;
        return data;
    }
}

export interface ICompletion {
    id?: number;
    habitId?: number;
    habit?: Habit;
    completedAt?: Date;
}

export class Habit implements IHabit {
    id!: number;
    title!: string;
    frequency!: string;
    userId!: number;
    count!: number;
    user?: User;

    constructor(data?: IHabit) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
            this.frequency = _data["frequency"];
            this.userId = _data["userId"];
            this.count = _data["count"];
            this.user = _data["user"] ? User.fromJS(_data["user"]) : undefined as any;
        }
    }

    static fromJS(data: any): Habit {
        data = typeof data === 'object' ? data : {};
        let result = new Habit();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        data["frequency"] = this.frequency;
        data["userId"] = this.userId;
        data["count"] = this.count;
        data["user"] = this.user ? this.user.toJSON() : undefined as any;
        return data;
    }
}

export interface IHabit {
    id: number;
    title: string;
    frequency: string;
    userId: number;
    count: number;
    user?: User;
}

export class HabitDto implements IHabitDto {
    title?: string | undefined;
    frequency?: string | undefined;
    count?: number;

    constructor(data?: IHabitDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["title"];
            this.frequency = _data["frequency"];
            this.count = _data["count"];
        }
    }

    static fromJS(data: any): HabitDto {
        data = typeof data === 'object' ? data : {};
        let result = new HabitDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["frequency"] = this.frequency;
        data["count"] = this.count;
        return data;
    }
}

export interface IHabitDto {
    title?: string | undefined;
    frequency?: string | undefined;
    count?: number;
}

export class HabitProgressDto implements IHabitProgressDto {
    habitId!: number;
    frequency!: string;
    count!: number;
    completedToday!: number;
    completedThisWeek!: number;
    completedThisMonth!: number;
    completedThisYear!: number;
    streak!: number;

    constructor(data?: IHabitProgressDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.habitId = _data["habitId"];
            this.frequency = _data["frequency"];
            this.count = _data["count"];
            this.completedToday = _data["completedToday"];
            this.completedThisWeek = _data["completedThisWeek"];
            this.completedThisMonth = _data["completedThisMonth"];
            this.completedThisYear = _data["completedThisYear"];
            this.streak = _data["streak"];
        }
    }

    static fromJS(data: any): HabitProgressDto {
        data = typeof data === 'object' ? data : {};
        let result = new HabitProgressDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["habitId"] = this.habitId;
        data["frequency"] = this.frequency;
        data["count"] = this.count;
        data["completedToday"] = this.completedToday;
        data["completedThisWeek"] = this.completedThisWeek;
        data["completedThisMonth"] = this.completedThisMonth;
        data["completedThisYear"] = this.completedThisYear;
        data["streak"] = this.streak;
        return data;
    }
}

export interface IHabitProgressDto {
    habitId: number;
    frequency: string;
    count: number;
    completedToday: number;
    completedThisWeek: number;
    completedThisMonth: number;
    completedThisYear: number;
    streak: number;
}

export class LoginDto implements ILoginDto {
    email?: string | undefined;
    password?: string | undefined;

    constructor(data?: ILoginDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): LoginDto {
        data = typeof data === 'object' ? data : {};
        let result = new LoginDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["password"] = this.password;
        return data;
    }
}

export interface ILoginDto {
    email?: string | undefined;
    password?: string | undefined;
}

export class RegisterDto implements IRegisterDto {
    username?: string | undefined;
    email?: string | undefined;
    password?: string | undefined;

    constructor(data?: IRegisterDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.username = _data["username"];
            this.email = _data["email"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): RegisterDto {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["username"] = this.username;
        data["email"] = this.email;
        data["password"] = this.password;
        return data;
    }
}

export interface IRegisterDto {
    username?: string | undefined;
    email?: string | undefined;
    password?: string | undefined;
}

export class User implements IUser {
    id?: number;
    username?: string | undefined;
    email?: string | undefined;
    passwordHash?: string | undefined;

    constructor(data?: IUser) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.username = _data["username"];
            this.email = _data["email"];
            this.passwordHash = _data["passwordHash"];
        }
    }

    static fromJS(data: any): User {
        data = typeof data === 'object' ? data : {};
        let result = new User();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["username"] = this.username;
        data["email"] = this.email;
        data["passwordHash"] = this.passwordHash;
        return data;
    }
}

export interface IUser {
    id?: number;
    username?: string | undefined;
    email?: string | undefined;
    passwordHash?: string | undefined;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}